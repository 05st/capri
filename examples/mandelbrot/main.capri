module main;

extern c_f64_add(f64, f64): f64;
extern c_f64_sub(f64, f64): f64;
extern c_f64_mul(f64, f64): f64;
extern c_f64_div(f64, f64): f64;
extern c_f64_gt(f64, f64): bool;
extern c_f64_lt(f64, f64): bool;

extern c_i64_to_f64(i64): f64;

extern c_bool_or(bool, bool): bool;
extern c_bool_and(bool, bool): bool;

extern c_clock(): i64;
extern c_clocks_per_sec(): i64;

import prelude;

op infixl 5 +.(a: f64, b: f64): f64     c_f64_add(a, b);
op infixl 5 -.(a: f64, b: f64): f64     c_f64_sub(a, b);
op infixl 10 *.(a: f64, b: f64): f64    c_f64_mul(a, b);
op infixl 10 /.(a: f64, b: f64): f64    c_f64_div(a, b);
op infixl 4 >.(a: f64, b: f64): bool    c_f64_gt(a, b);
op infixl 4 <.(a: f64, b: f64): bool    c_f64_lt(a, b);

op infixl 1 ||(a: bool, b: bool): bool  c_bool_or(a, b);
op infixl 2 &&(a: bool, b: bool): bool  c_bool_and(a, b);

fn pd(d: f64): unit
    if d >. 8.0
        print_str("#")
    else if d >. 4.0
        print_str("+")
    else if d >. 2.0
        print_str(".")
    else
        print_str(" ");

fn converge(cr, ci) {
    let mut r = 0.0;
    let mut i = 0.0;
    let mut r2 = 0.0;
    let mut i2 = 0.0;
    let mut iters = 0.0;
    while (r2 +. i2 <. 4.0) && (iters <. 256.0) {
        i = r *. i *. 2.0 +. ci;
        r = r2 -. i2 +. cr;
        r2 = r *. r;
        i2 = i *. i;
        iters = iters +. 1.0;
    };
    iters
};

fn plot(xmin, xmax, xstep, ymin, ymax, ystep) {
    let mut y = ymin;
    while y <. ymax {
        let mut x = xmin;
        while x <. xmax {
            pd(converge(x, y));
            x = x +. xstep;
        };
        print_str("\n");
        y = y +. ystep;
    };
};

fn main() {  
    let rs = -2.5;
    let is = -1.3;
    let rm = 0.05;
    let im = 0.07;

    let mut avg_time = 0.0;

    let mut count = 0.0;
    while count <. 100.0 {
        let start = c_i64_to_f64(c_clock());

        plot(rs, rs +. rm *. 78.0, rm, is, is +. im *. 40.0, im);

        let elapsed = (c_i64_to_f64(c_clock()) -. start) /. c_i64_to_f64(c_clocks_per_sec());
        avg_time = avg_time +. elapsed;
        count = count +. 1.0;
    };

    print_str("Drew 100 times\n");
    print_str("Avg. time per draw (s): ");
    print_f64(avg_time /. 100.0);
};